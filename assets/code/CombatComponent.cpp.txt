// Fill out your copyright notice in the Description page of Project Settings.


#include "Weapons/CombatComponent.h"
#include "WeaponComponent.h"

// Sets default values for this component's properties
UCombatComponent::UCombatComponent()
{
	// Set this component to be initialized when the game starts, and to be ticked every frame.  You can turn these features
	// off to improve performance if you don't need them.
	PrimaryComponentTick.bCanEverTick = true;

	// ...
}


// Called when the game starts
void UCombatComponent::BeginPlay()
{
	Super::BeginPlay();
}


// Called every frame
void UCombatComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

	// ...
}

void UCombatComponent::RequestReloadAmmo(int32 RequestedAmount, FName Type, UWeaponComponent* RequestingWeapon)
{
    int32* AvailableAmmoPtr = ReserveAmmoMap.Find(Type);

    if (AvailableAmmoPtr)
    {
        int32& AvailableAmmo = *AvailableAmmoPtr;
        const int32 AmmoToTransfer = FMath::Min(RequestedAmount, AvailableAmmo);

        if (AmmoToTransfer > 0)
        {
            AvailableAmmo -= AmmoToTransfer;

            // update HUD later

            RequestingWeapon->GrantReloadAmmo(AmmoToTransfer);
        }
    }
}

void UCombatComponent::AddReserveAmmo(FName AmmoType, int32 Amount)
{
    if (Amount <= 0) return;

    int32 CurrentAmmo = ReserveAmmoMap.FindOrAdd(AmmoType);

    int32 NewTotal = CurrentAmmo + Amount;
    ReserveAmmoMap.Add(AmmoType, NewTotal);

    UE_LOG(LogTemp, Log, TEXT("Added %d of %s. New total: %d"), Amount, *AmmoType.ToString(), NewTotal);

    OnReserveAmmoChanged.Broadcast(AmmoType, NewTotal);
}

